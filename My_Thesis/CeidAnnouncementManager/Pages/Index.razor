@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager UriHelper

@using System.Text.Json
@using System.Text.Json.Serialization;
@using DTOs.Data;
@using static DTOs.Common.Helpers;
@using DTOs.API.Responses;

<PageTitle>Announcements Manager</PageTitle>

<MudText Typo="Typo.h3">Welcome to Ceid Announcements Manager</MudText>

<MudGrid>
    @if (_myDTO != null)
    {
        @foreach (var myVar in _myDTO)
        {
            <MudItem xs="12">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@myVar.Title</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>@myVar.Author</MudText>
                        <MudText Typo="Typo.body2">@myVar.Abstract</MudText>
                    </MudCardContent>
                    @*<MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(e => ToggleOverlay(true))">Show Overlay</MudButton>
            <MudOverlay Visible="isVisible" >
            <ShowAnnouncement></ShowAnnouncement>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(e => ToggleOverlay(false))">Hide Overlay</MudButton>
            </MudOverlay>
            </MudCardActions>*@
                    <MudButton @onclick="@(e => click(myVar.AnnId))">  test </MudButton>
                </MudCard>
            </MudItem>
        }
    }
</MudGrid>



@code {

    private bool isVisible;
    public void ToggleOverlay(bool value)
    {
        isVisible = value;
    }

    public async Task<IEnumerable<AnnouncementDTO>> PrintWebApiResponse()
    {
        var response = await Http.GetStringAsync("https://localhost:5001/api/Announcement/GetAnnouncementBy");
        //string serializedString = System.Text.Json.JsonSerializer.Serialize(response);

        Console.WriteLine(response);

        var annResponse = response.DeserializeMethod<GetAnnouncementsByResponse>();

        return annResponse.Announcements;

    }

    private IEnumerable<AnnouncementDTO>? _myDTO;
    protected override async Task OnInitializedAsync()
    {

        _myDTO = await PrintWebApiResponse();
    }



    private void click(int id)
    {
        UriHelper.NavigateTo($"showannouncement/{id}");
    }
}
