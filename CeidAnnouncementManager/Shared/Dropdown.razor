@page "/drop"
@inject CategoriesRepository _categoriesRepository;

@using System;
@using System.Collections.Generic;
@using CeidAnnouncementManager.Services;
@using DTOs.Data;


<MudPaper Height="400px" Width="100%">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudSelect T="string" Label="Subjects" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="options">
            @foreach (var state in result)
            {
                <MudSelectItem T="string" Value="@state.CategoryName">@state.CategoryName</MudSelectItem>
            }
        </MudSelect>
    </MudContainer>
</MudPaper>

@*<MudGrid Class="mt-6 px-4">
    <MudItem xs="6">
        <MudText Typo="Typo.subtitle2">Value:</MudText>
        <MudText Typo="Typo.subtitle2">"</MudText>
        <MudText Typo="Typo.body2" Class="pl-4">@value</MudText>
        <MudText Typo="Typo.subtitle2">"</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudText Typo="Typo.subtitle2">SelectedValues: HashSet&lt;string&gt;</MudText>
        <MudText Typo="Typo.subtitle2">{</MudText>
        <MudText Typo="Typo.body2" Class="pl-4">@(string.Join(", ", options.Select(x=>$"\"{x}\"")))</MudText>
        <MudText Typo="Typo.subtitle2">}</MudText>
    </MudItem>
</MudGrid>*@

@code {

    private string value { get; set; } = "Nothing selected";
    private IEnumerable<string> options { get; set; } = new HashSet<string>();
    private IEnumerable<CategoriesDTO> result;
    private string[] states =
    {
        "Μαθηματικά 1", "Μαθηματικά 2", "Γραμμική Άλγεβρα", "Φυσική",
    };

    protected override async Task OnInitializedAsync()
    {
        result = await _categoriesRepository.FetchCategories();
    }

}



@*TODO SEND TO BACKEND CHOISES*@










































@*<HxSearchBox DataProvider="ProvideSearchResults"
             ItemTitleSelector="i => i.Title"
             ItemSubtitleSelector="i => i.Subtitle"
             ItemIconSelector="i => i.Icon"
             TItem="SearchBoxItem"
             Placeholder="Search"
             OnItemSelected="OnItemSelected"
             AllowTextQuery="true"
             @bind-TextQuery="textQuery"
             OnTextQueryTriggered="OnTextQueryTriggered">
    <DefaultContentTemplate>
        <div class="p-2 text-muted">Search for Mouse, Table or Door...</div>
    </DefaultContentTemplate>
    <NotFoundTemplate>
        <div class="small py-2 px-3 text-muted"><HxIcon CssClass="me-2" Icon="BootstrapIcon.EmojiFrown" />Sorry, I did not find that...</div>
    </NotFoundTemplate>
</HxSearchBox>





@code {






    private SearchBoxItem selectedItem;
    private string triggeredTextQuery;
    private string textQuery;

    List<SearchBoxItem> Data { get; set; } = new()
        {
            new() { Title = "Table", Subtitle = "50 000", Icon = BootstrapIcon.Table },
            new() { Title = "Mouse", Subtitle = "400", Icon = BootstrapIcon.Mouse },
            new() { Title = "Door", Subtitle = "1000", Icon = BootstrapIcon.DoorClosed }
        };

    private void OnItemSelected(SearchBoxItem item)
    {
        selectedItem = item;
    }

    private void OnTextQueryTriggered(string text)
    {
        triggeredTextQuery = text;
    }

    private async Task<SearchBoxDataProviderResult<SearchBoxItem>> ProvideSearchResults(SearchBoxDataProviderRequest request)
    {
        await Task.Delay(10); // imitate slower server API

        return new()
            {
                Data = Data.Where(i => i.Title.Contains(request.UserInput, StringComparison.OrdinalIgnoreCase))
            };
    }

    class SearchBoxItem
    {
        public string Title { get; set; }
        public string Subtitle { get; set; }
        public BootstrapIcon Icon { get; set; }
    }
}
*@