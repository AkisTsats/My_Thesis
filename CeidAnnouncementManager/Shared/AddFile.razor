@using DTOs.Common;
@inject HttpClient Http


<label style="
        box-shadow: 0 2px 7px #4caf50;
        display: inline-flex;
        width: 150px;
        justify-content: space-around;
        border-radius: 2em;
        color: white;
        border:2px solid;
        cursor: pointer;
        align-items: center;
        padding:16px;
        background-color: #4caf50;"
       for="fileInput2">
    Upload Files />
</label>

<InputFile id="fileInput2" OnChange="UploadFiles" hidden multiple />

@if (uploadResults.Count > 0)
{
@*     <MudList>
        @foreach (var file in uploadResults)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                File: @file; 
            </MudListItem>
        }
    </MudList> *@
}
@code
{
    [Parameter] public EventCallback<MultipartFormDataContent> OnUpload { get; set; }

    private int maxFilesNum = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private List<string?> uploadResults = new();

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxFilesNum))
        {
            var filecontent = new StreamContent(file.OpenReadStream(maxFileSize));
            filecontent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

            content.Add
            (
                content: filecontent,
                name: "\"files\"",
                fileName: file.Name);
        }
        await OnUpload.InvokeAsync(content);

    }
    // private string GetStoredFileName(string fileName)
    // {
    //     var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == fileName);
    //     if (uploadResult is not null)
    //     {
    //         return uploadResult.StoredFileName;
    //     }
    //     return "File not found";
    // }
}