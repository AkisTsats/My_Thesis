@inject UsersRepository _usersRepository

@using CeidAnnouncementManager.Services
@using Common
@using DTOs.Data;
@using Microsoft.AspNetCore.Components.Authorization

<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All">Ανακοινώσεις</MudNavLink>
    <AuthorizeView>
        <Authorized>
            @if (_permissions.HasFlag(Permissions.ReceivesAnnouncements))
            {
                <MudNavLink Href="/AnnouncementsForMe" Match="NavLinkMatch.Prefix">Ανακοινώσεις για εμένα</MudNavLink>
            }
            @if (_permissions.HasFlag(Permissions.ManageAnnouncements))
            {
                <MudNavLink Href="/AnnouncementsCreatedByMe" Match="NavLinkMatch.Prefix">Δημιουργημένες από εμένα</MudNavLink>
                <MudNavLink Href="/createannouncement" Match="NavLinkMatch.Prefix">Δημιουργία ανακοίνωσης</MudNavLink>
            }
            <MudNavLink Href="/usersettings" Match="NavLinkMatch.Prefix">Οι ρυθμίσεις μου</MudNavLink>
        </Authorized>
    </AuthorizeView>
</MudNavMenu>



@code {

    private Permissions _permissions = Permissions.NoPermissions;

    protected override async Task OnInitializedAsync()
    {
        var user = await _usersRepository.GetMe();

        if (!Common.RoleToPermissionMapping.TryGetValue(user.Role, out _permissions))
        {
            _permissions = Permissions.NoPermissions;
        }
    }
}
