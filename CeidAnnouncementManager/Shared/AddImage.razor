@using DTOs.Common;
@inject HttpClient Http

<label style="
        box-shadow: 0 2px 7px #4caf50;
        display: inline-flex;
        width: 150px;
        justify-content: space-around;
        border-radius: 2em;
        color: white;
        border:2px solid;
        cursor: pointer;
        align-items: center;
        padding:16px;
        background-color: #4caf50;"
       for="imageInput2">
    Upload Image<MudIcon Icon="@Icons.Material.Filled.CloudUpload" />
</label>

<InputFile id="imageInput2" OnChange="UploadFiles" />

@code
{
    [Parameter] public EventCallback<MultipartFormDataContent> OnUpload { get; set; }

    private int maxFilesNum = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private List<string?> uploadResults = new();

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxFilesNum))
        {
            var filecontent = new StreamContent(file.OpenReadStream(maxFileSize));
            filecontent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

            content.Add
            (
                content: filecontent,
                name: "\"files\"",
                fileName: file.Name);
        }
        await OnUpload.InvokeAsync(content);

    }
    // private string GetStoredFileName(string fileName)
    // {
    //     var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == fileName);
    //     if (uploadResult is not null)
    //     {
    //         return uploadResult.StoredFileName;
    //     }
    //     return "File not found";
    // }
    // private byte[] fileBytes;
    // private string imageDataUrl;

    // private async Task UploadImages(InputFileChangeEventArgs e)
    // {
    //     try
    //     {
    //         var imageFile = e.GetMultipleFiles().FirstOrDefault();
    //         if (imageFile != null)
    //         {
    //             using var stream = imageFile.OpenReadStream();
    //             using var memoryStream = new MemoryStream();
    //             await stream.CopyToAsync(memoryStream);
    //             fileBytes = memoryStream.ToArray();
    //             imageDataUrl = $"data:{imageFile.ContentType};base64,{Convert.ToBase64String(fileBytes)}";
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error uploading image: {ex}");
    //     }
    // }
}
