@inject CategoriesRepository _categoriesRepository;
@inject HttpClient Http
@using System.Text.Json;
@using System;
@using System.Collections.Generic;
@using CeidAnnouncementManager.Services;
@using DTOs.Common;
@using DTOs.Data;

<MudPaper Height="400px" Width="100%">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudSelect T="string" Label="Κατηγορίες" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="options">
            @if (all is not null)
            {
                @foreach (var category in all)
                {
                    <MudSelectItem T="string" Value="@category.CategoryName">@category.CategoryName</MudSelectItem>
                }
            }
        </MudSelect>
    </MudContainer>
</MudPaper>

@code {
    private string value { get; set; } = "Nothing selected";
    private IEnumerable<string> options { get; set; }
    private IEnumerable<CategoriesDTO> all;
    private IEnumerable<CategoriesDTO> selected;
    private List<CategoriesDTO> newCategories;
    private int id = 1;



    protected override async Task OnInitializedAsync()
    {
        try
        {
            // all = await _categoriesRepository.FetchCategories();
            // selected = await _categoriesRepository.FetchCategories(id);

            options = selected.Select(sel => sel.CategoryName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching categories: {ex}");
        }
    }

    public async Task SaveCategories()
    {
        try
        {
            //var toPost = JsonSerializer.Serialize(options);

            Console.WriteLine(options);

            await Http.PutAsJsonAsync($"https://localhost:5001/api/Categories/UpdateCategories/1", options);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while posting: {ex}");
        }
    }
}
