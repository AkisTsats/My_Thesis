@page "/"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager;
@inject PublicAnnouncementsRepository _announcementsRepository;

@using System.Text.Json
@using System.Text.Json.Serialization;
@using CeidAnnouncementManager.Services
@using DTOs.Data;
@using static DTOs.Common.Helpers;
@using DTOs.API.Responses;

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@attribute [AllowAnonymous]
<PageTitle>Διαχείρηση Ανακοινώσεων του ΤΜΗΥΠ</PageTitle>

<MudGrid Justify="Justify.Center" Class="d-flex" Spacing="2" Style="align-items: center">

    <MudImage Src="icon-192.jpg" xs="12" Class="ma-6" Width="210" Height="55" />


    @foreach (var announcement in _announcementDTOs)
    {
        <MudItem xs="10" aling-center>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@announcement.Title</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudText Typo="Typo.caption">Από @announcement.Author.FullName την @announcement.CreationDate.ToShortDateString()</MudText>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>@announcement.Author</MudText>
                    <MudText Typo="Typo.body2">@announcement.Abstract</MudText>
                </MudCardContent>
                @* @foreach (var tag in myVar.Tags)
            {
            <MudChip Label="@tag" />
            } *@
                <MudCardActions>
                    <MudButton OnClick="() => ShowAnnouncementInDetail(announcement.Id)" Variant="Variant.Text">Λεπτομέρειες Ανακοίνωσης</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }


    <MudItem xs="5"></MudItem>
    <MudItem xs="6">
        <MudPagination SelectedChanged="PageChanged" Count="@_totalNumOfPages" />
    </MudItem>
</MudGrid>


@code {

    private int _onPage { get; set; } = 1;
    private int _totalNumOfPages { get; set; } = 1;
    private int _pageSize { get; set; } = 2;

    private string _searchText { get; set; } = "";
    private ICollection<int> _searchInCategoriesIds { get; set; } = [];
    private ICollection<int> _searchInSubjectsIds { get; set; } = [];

    private ICollection<AnnouncementDTO> _announcementDTOs { get; set; } = [];


    protected override async Task OnInitializedAsync()
    {
        await ReloadAnnouncements();
    }

    private async Task ReloadAnnouncements()
    {
        var request = new DTOs.API.Public.GetAnnouncements.Request
            {
                TextContains = string.IsNullOrWhiteSpace(_searchText) ? null : _searchText,
                InCategoriesIds = _searchInCategoriesIds.Any() ? _searchInCategoriesIds : null,
                InSubjectIds = _searchInSubjectsIds.Any() ? _searchInSubjectsIds : null,
                Limit = _pageSize,
                Skip = (_onPage - 1) * _pageSize,
                //TODO ordering
            };

        var response = await _announcementsRepository.FetchMultiple(request);

        _announcementDTOs = response.Announcements.ToList();
        _totalNumOfPages = response.TotalCount / _pageSize;
    }

    public async Task PageChanged(int i)
    {
        _onPage = i;
        await ReloadAnnouncements();
    }


    private void ShowAnnouncementInDetail(int id)
    {
        NavManager.NavigateTo($"showannouncement/{id}");
    }
}
