@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager UriHelper

@using System.Text.Json
@using System.Text.Json.Serialization;
@using DTOs.Data;
@using static DTOs.Common.Helpers;
@using DTOs.API.Responses;

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Announcements Manager</PageTitle>

<MudText Typo="Typo.h3">Welcome to Ceid Announcements Manager</MudText>

<MudGrid>
    @if (claims.Count() > 0)
    {
        <h2>User Claims:</h2>
        <ul>
            @foreach (var claim in claims)
            {
                <li>@claim.Type: @claim.Value</li>
            }
        </ul>
    }
    @* @if (_myDTO != null)
    {
        @foreach (var myVar in _myDTO)
        {
            <MudItem xs="12">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@myVar.Title</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>@myVar.Author</MudText>
                        <MudText Typo="Typo.body2">@myVar.Abstract</MudText>
                    </MudCardContent>
                    
                    <MudButton @onclick="@(e => click(myVar.AnnID))">  test </MudButton>
                </MudCard>
            </MudItem>
        }
    } *@
    
</MudGrid>



@code {

    private bool isVisible;
    public void ToggleOverlay(bool value)
    {
        isVisible = value;
    }
    public async Task<IEnumerable<AnnouncementDTO>> PrintWebApiResponse()
    {
        var response = await Http.GetStringAsync("https://localhost:5001/api/Announcement/GetAllAnnouncement");
        ////string serializedString = System.Text.Json.JsonSerializer.Serialize(response);

        var annResponse = response.DeserializeMethod<GetAnnouncementsByResponse>();
        
        return annResponse.Announcements;

    }

    private IEnumerable<AnnouncementDTO>? _myDTO;

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
       // _myDTO = await PrintWebApiResponse();
    }



    private void click(int id)
    {
        UriHelper.NavigateTo($"showannouncement/{id}");
    }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    //protected override Task OnInitializedAsync() => GetClaimsPrincipalData();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            claims = user.Claims;
        }
    }

}
