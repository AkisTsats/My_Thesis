@page "/showannouncement/{id:int}"
@using CeidAnnouncementManager.Services
@using DTOs.API.Responses;
@using DTOs.Data;
@inject HttpClient Http
@inject AnnouncementsRepository _announcementsRepository;
@inject PublicRepository _publicRepository;
@using static DTOs.Common.Helpers;

@if (_announcementDTO is not null)
{
        var annID = _announcementDTO.Id;
        //<MudText Typo="Typo.h3">Show Announcement</MudText>
        <MudGrid Justify="Justify.Center" Class="d-flex" Spacing="2" Style="align-items: center">
            <MudItem xs="10">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">@_announcementDTO.Title</MudText>
                            <MudText>Δημιουργήθηκε στις: @_announcementDTO.CreationDate</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>@((MarkupString)_announcementDTO.Body)</MudText>
                        @if (_announcementDTO.Files != null)
                        {
                            //var base64Image = Convert.ToBase64String(_announcementDTO.Files.);
                            //<img src="data:image/png;base64,@base64Image" alt="Announcement Image" class="announcement-image" />
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
        <MudGrid Justify="Justify.Center" Class="d-flex" Spacing="2" Style="align-items: center;">
            <MudButton OnClick="() => OnButtonClickedEdit((int)annID)" Variant="Variant.Filled" Color="Color.Info">Edit announcement</MudButton>
            <MudButton OnClick="() => OnButtonClickedDelete((int)annID)" Variant="Variant.Filled" Color="Color.Secondary">Delete announcement</MudButton>
        </MudGrid>
}

@code {

    @inject NavigationManager NavManager
    [Inject] private IDialogService DialogService { get; set; }

    [Parameter]
    public int id { get; set; }

    private AnnouncementDTO _announcementDTO;

    protected override async Task OnInitializedAsync()
    {
        var request = new DTOs.API.Public.GetAnnouncement.Request
            {
                Id = id
            };
        var response = await _publicRepository.FetchSingle(request);

        _announcementDTO = response.Announcement;
    }


    private async void DeleteAnnouncement(int annID)
    {
        var id = annID;
        var response = await Http.DeleteAsync($"https://localhost:5001/api/Announcement/DeleteAnnouncementByID/{id}");
        Console.WriteLine(response);
        NavManager.NavigateTo("myannouncements");
    }

    private async void EditAnnouncement(int annID)
    {
        var id = annID;
        string s = id.ToString();
        NavManager.NavigateTo("editannouncement/" + s);
    }

    private async void OnButtonClickedDelete(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Are you sure you want to delete this announcement?",
            "",
            yesText: "Delete the announcement", cancelText: "Return to the announcement");
        StateHasChanged();
        if (result == true)
        {
            DeleteAnnouncement(id);
        }

    }

    private async void OnButtonClickedEdit(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Do you want to edit this announcement?",
            "",
            yesText: "Edit announcement", cancelText: "Return to the announcement");
        StateHasChanged();
        if (result == true)
        {
            EditAnnouncement(id);
        }

    }

}
