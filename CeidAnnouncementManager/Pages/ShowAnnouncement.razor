@page "/showannouncement/{id:int}"
@using DTOs.API.Responses;
@using DTOs.Data;
@inject HttpClient Http
@using static DTOs.Common.Helpers;

@if (_myDTO is not null)
{
    @foreach (var myVar in _myDTO)
    {
        var annID = myVar.AnnID;
        //<MudText Typo="Typo.h3">Show Announcement</MudText>
        <MudGrid Justify="Justify.Center" Class="d-flex" Spacing="2" Style="align-items: center">
            <MudItem xs="10">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">@myVar.Title</MudText>
                            <MudText >Posted on: @myVar.Date</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>@myVar.Body</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
        <MudGrid Justify="Justify.Center" Class="d-flex" Spacing="2" Style="align-items: center;">
            <MudButton OnClick="() => OnButtonClickedEdit(annID)" Variant="Variant.Filled" Color="Color.Primary">Edit announcement</MudButton>

            <MudButton OnClick="() => OnButtonClickedDelete(annID)" Variant="Variant.Filled" Color="Color.Secondary">Delete announcement</MudButton>
        </MudGrid>
    }
}

@code {

    @inject NavigationManager NavManager
    [Inject] private IDialogService DialogService { get; set; }


    [Parameter]
    public int id { get; set; }

    private IEnumerable<AnnouncementDTO> _myDTO;

    public async Task<IEnumerable<AnnouncementDTO>> PrintWebApiResponse()
    {
        var response = await Http.GetStringAsync($"https://localhost:5001/api/Announcement/GetAnnouncementByObj?id={id}");
        //string serializedString = System.Text.Json.JsonSerializer.Serialize(response);

        Console.WriteLine(response);

        var apiResponse = response.DeserializeMethod<GetAnnouncementsByResponse>();

        var annResponse = apiResponse.Announcements;




        return annResponse;

    }


    protected override async Task OnInitializedAsync()
    {

        _myDTO = await PrintWebApiResponse();
    }


    private async void DeleteAnnouncement(int annID)
    {
        var id = annID;
        var response = await Http.DeleteAsync($"https://localhost:5001/api/Announcement/DeleteAnnouncementByID/{id}");
        Console.WriteLine(response);
        NavManager.NavigateTo("myannouncements");
    }

    private async void EditAnnouncement(int annID)
    {
        var id = annID;
        string s = id.ToString();
        NavManager.NavigateTo("editannouncement/" + s);
    }

    private async void OnButtonClickedDelete(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Are you sure you want to delete this announcement?",
            "",
            yesText: "Delete the announcement", cancelText: "Return to the announcement");
        StateHasChanged();
        if (result == true)
        {
            DeleteAnnouncement(id);
        }

    }

    private async void OnButtonClickedEdit(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Do you want to edit this announcement?",
            "",
            yesText: "Edit announcement", cancelText: "Return to the announcement");
        StateHasChanged();
        if (result == true)
        {
            EditAnnouncement(id);
        }

    }

}
