@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using System.Text.Json
@using System.Text.Json.Serialization;
@using DTOs.Data;
@using static DTOs.Common.Helpers;
@using DTOs.API.Responses;

@page "/announcementsForModeration"


<PageTitle>For Moderation</PageTitle>


<MudText Typo="Typo.h3">AnnouncementsForModeration</MudText>


<MudGrid>
    @if (_myDTO != null)
    {
        @foreach (var myVar in _myDTO)
        {
            <MudItem xs="12">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@myVar.Title</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>@myVar.Author</MudText>
                        <MudText Typo="Typo.body2">@myVar.Abstract</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Href="showannouncement" Variant="Variant.Text" Color="Color.Info">Read More</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    }
</MudGrid>



@code {
    public async Task<IEnumerable<AnnouncementDTO>> PrintWebApiResponse()
    {
        var response = await Http.GetStringAsync("https://localhost:5001/api/Announcement/GetAnnouncementBy");
        //string serializedString = System.Text.Json.JsonSerializer.Serialize(response);

        Console.WriteLine(response);

        var annResponse = response.DeserializeMethod<GetAnnouncementsByResponse>();

        return annResponse.Announcements;

    }

    protected override async Task OnInitializedAsync()
    {

        _myDTO = await PrintWebApiResponse();
    }

    private IEnumerable<AnnouncementDTO> _myDTO;

}

