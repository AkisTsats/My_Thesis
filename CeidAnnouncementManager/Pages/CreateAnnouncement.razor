@page "/createannouncement"
@inject HttpClient Http
@inject SettingsRepository _settingsRepository;
@inject NavigationManager UriHelper
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization;
@using CeidAnnouncementManager.Services
@using DTOs.Common;
@using DTOs.Data;
@using static DTOs.Common.Helpers;
@using DTOs.API.Responses;
@using CeidAnnouncementManager.Shared;

<MudText Typo="Typo.h3">Προσθήκη Ανακοίνωσης</MudText>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm Model="@announcement">
                <MudTextField T="string" Label="Τίτλος" Required="true" @bind-Value="announcement.Title" />
                <MudTextField T="string" Label="Περίληψη" @bind-Value="announcement.Abstract" Required="false" />
                <MudExRichTextEdit @ref="@Editor"
                                   ReadOnly="false"
                                   Height="444"
                                   Class="m-2"
                                   Placeholder="Edit html">
			 
                </MudExRichTextEdit>
                <MudTextField T="string" Label="Κείμενο" @bind-Value="announcement.Body" Lines="30" Required="true" />
                @if (false)//TOADD check if he has permissions
                {
                    <div class="d-flex align-center justify-space-between mt-6">
                        <MudCheckBox T="bool" Class="ml-n2" @bind-Checked="announcement.Alert" Label="SOS" />
                    </div>
                }
            </MudForm>
            <MudSelect T="CategoriesDTO" Label="Επιλέξτε κατηγορίες" MultiSelection="true" @bind-Value="CategoriesDTO.DEFAULT_NO_CATEGORY_CHOOSEN" @bind-SelectedValues="SelectedCategories">
                @foreach (var category in AllCategories)
                {
                    <MudSelectItem T="CategoriesDTO" Value="@category">@category.CategoryName</MudSelectItem>
                }
            </MudSelect>
            <AddFile OnUpload="Upload"></AddFile><AddImage OnUpload="UploadImage"></AddImage>
            <MudButton Variant="Variant.Filled" Color="Color.Info" Class="ml-auto" OnClick="OnButtonClicked">Προσθήκη Ανακοίνωσης</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private IEnumerable<CategoriesDTO> AllCategories { get; set; }
    private IEnumerable<CategoriesDTO> SelectedCategories { get; set; }

    private List<UploadResult> uploadResults = new();
    MudExRichTextEdit Editor;	
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var settings = await _settingsRepository.FetchSettingsForCreateAnnouncement();
            
            AllCategories = settings.Categories;
            //all other settings...
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching categories: {ex}");
        }
    }


    async Task Upload(MultipartFormDataContent content)
    {
        var fileToUpload = content;
        var response = await Http.PostAsync("https://localhost:5001/api/FileUpload/UploadService", content);

        var result = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

        if (result is not null)
        {
            uploadResults = uploadResults.Concat(result).ToList();
        }
    }
    async Task UploadImage(MultipartFormDataContent content)
    {
        var response = await Http.PostAsync("https://localhost:5001/api/FileUpload/UploadService?isImage=true", new MultipartFormDataContent()
        { });

        var result = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

        if (result is not null)
        {
            uploadResults = uploadResults.Concat(result).ToList();
        }
    }

    [Inject] private IDialogService DialogService { get; set; }

    AnnouncementDTO announcement = new AnnouncementDTO();

    //TODO add form validation and error handling

    private async void OnButtonClicked()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Οριστική υποβολή ανακοίνωσης?",
            "",
            yesText: "Προσθήκη ανακοίνωσης", cancelText: "Επιστροφή στην ανακοίνωση");
        StateHasChanged();
        if (result == true)
        {
            await PostOnAPI();
            UriHelper.NavigateTo("myannouncements");
        }
    }

    public async Task PostOnAPI()
    {

        announcement.Author = "Admin";
        announcement.UserID = 1;
        announcement.Date = DateTime.Now;
        announcement.Files = uploadResults;

        var post = announcement.SerializeMethod<AnnouncementDTO>();

        //Console.WriteLine(post);

        await Http.PostAsJsonAsync("https://localhost:5001/api/Announcement/CreateAnnouncement", announcement);
    }
}