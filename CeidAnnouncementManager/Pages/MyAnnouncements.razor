@inject IJSRuntime JSRuntime

@using System.Text.Json
@using System.Text.Json.Serialization;
@using DTOs.Data;
@using static DTOs.Common.Helpers;
@using DTOs.API.Responses;
@using Microsoft.AspNetCore.Authorization;
@inject NavigationManager UriHelper

@attribute [Authorize]
@inject HttpClient Http

@page "/myannouncements"

<PageTitle>My Announcements</PageTitle>





<MudGrid Justify="Justify.Center" Class="d-flex" Spacing="2" Style="align-items: center">

    @if (_myDTO != null)
    {
        <MudText xs="4" Typo="Typo.h3">My Announcements</MudText>
        <MudItem xs="6"></MudItem>
        <MudItem xs="2" Style="align-items: center;">
            <MudButton Variant="Variant.Filled" align-center EndIcon="@Icons.Material.Filled.Add" Style="background-color: yellowgreen; color: white; width: 200px; height: 60px;" Href="createannouncement">
                Create New Announcement
            </MudButton>
        </MudItem>
        @foreach (var myVar in _myDTO)
        {
            var annID = myVar.AnnID;
            <MudItem xs="10" aling-center>
                <MudCard Style="background-color: #EDE7F6;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@myVar.Title</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>@myVar.Author</MudText>
                        <MudText Typo="Typo.body2">@myVar.Abstract</MudText>
                    </MudCardContent>
                    <MudChip Label="true">Undergraduate</MudChip>
                    <MudChip Label="true">Μαθηματικά 1</MudChip>
                    <MudChip Label="true">Αλγόριθμοι</MudChip>
                    <MudCardActions>
                        <MudButton OnClick="() => NavigateTo(annID)" Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
        <MudItem xs="5"></MudItem>
        <MudItem xs="6">
            <MudPagination SelectedChanged="PageChanged" Color="Color.Primary" Count="@numOfPages" />
        </MudItem>
    }

</MudGrid>





@code {


    private int _selected = 1;
    private int numOfPages = 1;
    private int pageSize = 10;

    public async Task<IEnumerable<AnnouncementDTO>> GetWebApiResponse()
    {
        string s1 = pageSize.ToString();
        string s2 = _selected.ToString();
        var response = await Http.GetStringAsync("https://localhost:5001/api/Announcement/GetAnnouncementByObj?" + "limit=" + s1 + "&skip=" + s2);

        //string serializedString = System.Text.Json.JsonSerializer.Serialize(response);

        Console.WriteLine(response);
        //Console.WriteLine(serializedString);

        var annResponse = response.DeserializeMethod<GetAnnouncementsByResponse>();

        int count = annResponse.SumOfAnnouncements;

        int numOfPages = getPageCount(count);


        var ann = annResponse.Announcements;

        return ann;

    }

    private int getPageCount(int count)
    {
        //count % pageSize == 0 ? numOfPages = (count/pageSize) : numOfPages = (count/pageSize) + 1;
        if (count % pageSize == 0)
        {
            numOfPages = (count / pageSize);
        }
        else
        {
            numOfPages = (count / pageSize) + 1;
        }

        return numOfPages;
    }

    public async Task<IEnumerable<AnnouncementDTO>> PrintWebApiResponse()
    {
        _allDTO = await GetWebApiResponse();


        return _allDTO;
    }


    protected override async Task OnInitializedAsync()
    {

        _myDTO = await PrintWebApiResponse();
    }


    public async Task<IEnumerable<AnnouncementDTO>> PageChanged(int i)
    {
        _selected = i;
        _change = await PrintWebApiResponse();
        _myDTO = _change;

        return _change;
    }

    @inject NavigationManager NavManager

    private void NavigateTo(int id)
    {
        var s = id.ToString();
        NavManager.NavigateTo("showannouncement/" + s);
    }

    private IEnumerable<AnnouncementDTO> _myDTO;
    private IEnumerable<AnnouncementDTO> _allDTO;
    private IEnumerable<AnnouncementDTO> _change;
}








@*
    @foreach (var myVar in _myDTO)
{
    <div class="container mt-5 mb-5">
        <div class="d-flex justify-content-center row">
            <div class="col-md-10">
                <div class="row p-2 bg-white border rounded">

                    <div class="col-md-6 mt-1">
                        <h5>@myVar.Title</h5>
                        <div class="d-flex flex-row">
                            <div class="mt-1 mb-1 spec-1"><span>@myVar.AnnID</span></div>
                        </div>
                        <div class="mt-1 mb-1 spec-1"><span>@myVar.Subjects</span></div>
                        <div class="mt-1 mb-1 spec-1"><span>@myVar.Date</span></div>
                        <p class="text-justify text-truncate para mb-0">@myVar.Body<br><br></p>
                        <div class="align-items-center align-content-center col-md-3 border-left mt-1">
                        </div>
                        <NavLink class="nav-link" href="showannouncement">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> Show Announcement
                        </NavLink>
                    </div>


                </div>
            </div>
        </div>
    </div>
}





<div class="container">
    <div class="row">
        <div class="col text-center">
            <NavLink class="nav-link" href="createannouncement">
                <span class="oi oi-plus" aria-hidden="true"></span> Προσθήκη Ανακοίνωσης
            </NavLink>
        </div>
    </div>
</div>*@



