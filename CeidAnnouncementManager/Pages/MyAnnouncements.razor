@using System.Text.Json
@using System.Text.Json.Serialization;
@using CeidAnnouncementManager.Services
@using DTOs.Data;
@inject CategoriesRepository _categoriesRepository;
@inject HttpClient Http
@using static DTOs.Common.Helpers;
@using DTOs.API.Responses;
@using Microsoft.AspNetCore.Authorization;
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime
@inject UsersRepository _usersRepository;

@attribute [Authorize]
@page "/myannouncements"

<PageTitle>My Announcements</PageTitle>

<MudGrid Justify="Justify.Center" Class="d-flex" Spacing="2" Style="align-items: center">

</MudGrid>

@code {
    private int _selected = 1;
    private string value { get; set; } = "Nothing selected";
    private int numOfPages = 1;
    private int pageSize = 2;
    private int id = 1;

    private IEnumerable<CategoryDTO> all;
    private IEnumerable<CategoryDTO> selected;
    private IEnumerable<AnnouncementDTO>? _myDTO;
    private IEnumerable<AnnouncementDTO>? _allDTO;
    private IEnumerable<AnnouncementDTO>? _change;

    private IEnumerable<string> options { get; set; } = new HashSet<string>();

    public async Task<IEnumerable<AnnouncementDTO>> GetWebApiResponse()
    {
        string s1 = pageSize.ToString();
        string s2 = _selected.ToString();
        string categoryFilter = options != null ? $"&category={options.First()}" : "";

        var response = await Http.GetStringAsync($"https://localhost:5001/api/Announcement/GetAnnouncementByObj?limit={s1}&skip={s2}{categoryFilter}");

        //string serializedString = System.Text.Json.JsonSerializer.Serialize(response);

        Console.WriteLine(response);
        //Console.WriteLine(serializedString);

        var annResponse = response.DeserializeMethod<GetAnnouncementsByResponse>();

        var count = annResponse.SumOfAnnouncements;

        numOfPages = getPageCount(count);

        var ann = annResponse.Announcements;

        return ann;
    }
    private async Task<IEnumerable<AnnouncementDTO>> HandleCategoryChange()
    {
        return await GetWebApiResponse();
    }

    public async Task GetCategories()
    {
        all = await _categoriesRepository.FetchCategories();
        //selected = await _categoriesRepository.FetchCategories(id);
        foreach (var sel in all)
        {
            var catToAdd = sel.CategoryName;
            options = options.Concat(new[] { catToAdd });
        }
    }

    private int getPageCount(int count)
    {
        //count % pageSize == 0 ? numOfPages = (count/pageSize) : numOfPages = (count/pageSize) + 1;
        if (count % pageSize == 0)
        {
            numOfPages = (count / pageSize);
        }
        else
        {
            numOfPages = (count / pageSize) + 1;
        }
        return numOfPages;
    }

    public async Task<IEnumerable<AnnouncementDTO>> PrintWebApiResponse()
    {
        _allDTO = await GetWebApiResponse();
        return _allDTO;
    }

    protected override async Task OnInitializedAsync()
    {
        var me = await _usersRepository.GetMe();

        await GetCategories();

        _myDTO = await PrintWebApiResponse();
    }

    public async Task<IEnumerable<AnnouncementDTO>> PageChanged(int i)
    {
        _selected = i;
        _change = await PrintWebApiResponse();
        _myDTO = _change;

        return _change;
    }

    @inject NavigationManager NavManager;

    private void NavigateTo(int id)
    {
        var s = id.ToString();
        NavManager.NavigateTo("showannouncement/" + s);
    }

}