@* @page "/rich-text-editor"
@using MudBlazor
@using MudExRichTextEditor
@inject IDialogService DialogService
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string Content { get; set; }

    private IBrowserFile selectedFile;

    private void Upload()
    {
        if (selectedFile != null)
        {
            MudDialog.Close(DialogResult.Ok(new FileUploadResult { File = selectedFile }));
        }
        else
        {
            MudDialog.Cancel();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}

<MudDialogContent>
    <MudText>{Content}</MudText>
    <MudFileUpload @bind-Value="selectedFile" Accept="image/*" />
</MudDialogContent>
<MudDialogActions>
    <MudButton OnClick="Upload" Color="Color.Primary">Upload</MudButton>
    <MudButton OnClick="Cancel">Cancel</MudButton>
</MudDialogActions>

<MudPaper>
    <MudExRichTextEdit @ref="richTextEditor" 
                       UploadImage="UploadImage" 
                       @bind-Value="editorContent">
    </MudExRichTextEdit>
    <MudButton Color="Color.Primary" @onclick="SubmitContent">Submit</MudButton>
</MudPaper>

@code {
    private string editorContent;

    private async Task<string> UploadImage(UploadImageArgs args)
    {
        // Create a file upload dialog to choose an image
        var parameters = new DialogParameters();
        parameters.Add("Content", "Please select an image to upload.");
        
        var dialog = DialogService.Show<FileUploadDialog>("Upload Image", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var file = (result.Data as FileUploadResult)?.File;
            if (file != null)
            {
                // Here, you would typically upload the file to your server.
                // This is just a placeholder URL. Replace it with your actual upload logic.
                var url = await UploadFileToServer(file);
                return url; // Return the URL of the uploaded image
            }
        }
        return null; // No image uploaded
    }

    private async Task<string> UploadFileToServer(IBrowserFile file)
    {
        // Implement your file upload logic here.
        // This can be an API call to upload the image and return the URL.
        // For demo purposes, returning a placeholder URL.
        return "https://example.com/path/to/uploaded/image.jpg";
    }

    private void SubmitContent()
    {
        // Handle form submission here
        // editorContent contains the HTML content from the editor
        Console.WriteLine(editorContent);
    }
} *@