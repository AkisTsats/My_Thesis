@page "/editannouncement/{id:int}"
@inject HttpClient Http
@inject NavigationManager UriHelper
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization;
@using DTOs.Data;
@using static DTOs.Common.Helpers;
@using DTOs.API.Responses;



<MudText Typo="Typo.h3">Επεξεργασία ανακοίνωσης</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="postBody">
                <MudTextField Label="Τίτλος" @bind-Value="postBody.Title" />
                <MudTextField Label="Περίληψη" @bind-Value="postBody.Abstract" />
                <MudTextField Label="Κείμενο" @bind-Value="postBody.Body" Lines="30" />
            </EditForm>
            <AddFile></AddFile>
            <MudButton Variant="Variant.Filled" Color="Color.Info" Class="ml-auto" OnClick="OnButtonClicked">Update Announcement </MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {

    [Inject] private IDialogService DialogService { get; set; }
    @inject NavigationManager NavManager

    AnnouncementDTO postBody = new AnnouncementDTO();

    private AnnouncementDTO _myDTO;

    private async void OnButtonClicked()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Are you sure you want to update this announcement?",
            "",
            yesText: "Post the announcement", cancelText: "Return to the announcement");
        StateHasChanged();
        if (result == true)
        {
            try
            {
                PutOnAPI(id);
                NavManager.NavigateTo("myannouncements");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating announcement: {ex.Message}");
            }
        }

    }

    public async Task<AnnouncementDTO> GetWebApiResponse(int id)
    {
        var response = await Http.GetStringAsync($"https://localhost:5001/api/Announcement/GetAnnouncementByObj?id={id}");
        //string serializedString = System.Text.Json.JsonSerializer.Serialize(response);

        Console.WriteLine(response);

        var apiResponse = response.DeserializeMethod<GetAnnouncementsByResponse>();

        var annResponse = apiResponse.Announcements.First();


        return annResponse;

    }

    [Parameter] public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            postBody = await GetWebApiResponse(id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching announcement: {ex.Message}");
        }
    }



    public async Task PutOnAPI(int id)
    {

        //postBody.UserID = 1;
        postBody.CreationDate = DateTime.Now;

        var post = postBody.SerializeMethod<AnnouncementDTO>();

        Console.WriteLine(post);

        try
        {
            await Http.PutAsJsonAsync($"https://localhost:5001/api/Announcement/UpdateAnnouncementByID/{id}", postBody);
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error while posting: {ex.Message}");
        }

    }

}