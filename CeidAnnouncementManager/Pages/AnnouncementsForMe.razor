@page "/AnnouncementsForMe"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager;
@inject SettingsRepository _settingsRepository;
@inject PublicRepository _publicRepository;
@inject AnnouncementsRepository _announcementRepository;

@using System.Text.Json
@using System.Text.Json.Serialization;
@using CeidAnnouncementManager.Services
@using DTOs.Data;
@using static DTOs.Common.Helpers;
@using DTOs.API.Responses;

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@attribute [Authorize]
<PageTitle>Διαχείρηση Ανακοινώσεων του ΤΜΗΥΠ</PageTitle>

<MudLayout>
    <MudContainer Style="height: 100vh; display: flex; overflow: hidden;">
        <MudPaper Elevation="1" Class="pa-4" Style="width: 300px; overflow-y: auto;">
            <MudImage Class="justify-center ma-6" Src="icon-192.jpg" Width="210" Height="55" />

            <MudText Typo="Typo.h6">Φίλτρα</MudText>

            <MudTextField T="string" Label="Αναζήτηση" Variant="Variant.Outlined" Placeholder="Αναζήτηση στις ανακοινώσεις..." @bind-Value="_searchText" />

            <MudSelect Disabled="true" Class="mt-10" T="CategoryDTO" Label="Επιλέξτε κατηγορίες" MultiSelection="true" ToStringFunc="@CategoryConverter" @bind-Value="CategoryDTO.DEFAULT_NO_CATEGORY_CHOOSEN" @bind-SelectedValues="SelectedCategories" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiselectionTextForCategories))">
                @foreach (var category in AllCategories)
                {
                    <MudSelectItem T="CategoryDTO" Value="@category">@category.CategoryName</MudSelectItem>
                }
            </MudSelect>
            <MudSelect Disabled="true" Class="mt-10" T="SubjectDTO" Label="Επιλέξτε μαθήματα" MultiSelection="true" ToStringFunc="@SubjectConverter" @bind-Value="SubjectDTO.DEFAULT_NO_SUBJECT_CHOOSEN" @bind-SelectedValues="SelectedSubjects" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiselectionTextForSubjects))">
                @foreach (var subject in AllSubjects)
                {
                    <MudSelectItem T="SubjectDTO" Value="@subject">@subject.SubjectName</MudSelectItem>
                }
            </MudSelect>

            <br />
            <MudButton OnClick="ReloadAnnouncements">ΑΝΑΖΗΤΗΣΗ</MudButton>

        </MudPaper>

        <MudPaper Class="pa-4" Style="flex-grow: 1; overflow-y: auto;">
            <MudStack Direction="row" JustifyContent="Justify.SpaceBetween">
                @foreach (var announcement in _announcementDTOs)
                {
                    <MudPaper Class="pa-4 mt-2" Style="max-width: 800px;">
                        <MudText Typo="Typo.h6">@announcement.Title</MudText>
                        <MudText Typo="Typo.caption">Από @announcement.Author.FullName, ημερομηνία: @announcement.CreationDate.ToShortDateString()</MudText>
                        <MudText Typo="Typo.subtitle2">@announcement.Abstract</MudText>
                        @foreach (var subject in announcement.Subjects.Take(3))
                        {
                            <MudChip T="string" Size="Size.Small">@subject.SubjectName</MudChip>
                        }
                        @foreach (var category in announcement.Categories.Take(3))
                        {
                            <MudChip T="string" Size="Size.Small">@category.CategoryName</MudChip>
                        }
                        <br />
                        <MudButton OnClick="() => ShowAnnouncementInDetail(announcement.Id)" Variant="Variant.Text" Style="text-transform:none">...περισσότερα</MudButton>
                    </MudPaper>
                }
                <MudPagination SelectedChanged="PageChanged" Count="@_totalNumOfPages" />
            </MudStack>
        </MudPaper>

    </MudContainer>
</MudLayout>

@code {

    private int _onPage { get; set; } = 1;
    private int _totalNumOfPages { get; set; } = 1;
    private int _pageSize { get; set; } = 5;

    private string _searchText { get; set; } = "";
    private ICollection<int> _searchInCategoriesIds { get; set; } = [];
    private ICollection<int> _searchInSubjectsIds { get; set; } = [];

    private ICollection<AnnouncementDTO> _announcementDTOs { get; set; } = [];


    #region Categories picker
    private IEnumerable<CategoryDTO> AllCategories { get; set; } = [];
    private IEnumerable<CategoryDTO> SelectedCategories { get; set; } = [];

    private string GetMultiselectionTextForCategories(List<string> selectedValues) => selectedValues.Count == 0 ? "Δεν έχουν επιλεχθεί κατηγορίες" : $"{string.Join(", ", selectedValues.Select(x => x))}";

    Func<CategoryDTO, string> CategoryConverter = p => p?.CategoryName;
    #endregion

    #region Subject picker
    private IEnumerable<SubjectDTO> AllSubjects { get; set; } = [];
    private IEnumerable<SubjectDTO> SelectedSubjects { get; set; } = [];

    private string GetMultiselectionTextForSubjects(List<string> selectedValues) => selectedValues.Count == 0 ? "Δεν έχουν επιλεχθεί Μαθήματα" : $"{string.Join(", ", selectedValues.Select(x => x))}";

    Func<SubjectDTO, string> SubjectConverter = p => p?.SubjectName;
    #endregion


    protected override async Task OnInitializedAsync()
    {
        await ReloadAnnouncements();

        var settings = await _publicRepository.FetchFilteringSettings();

        AllCategories = settings.Categories;
        AllSubjects = settings.Subjects;

    }

    private async Task ReloadAnnouncements()
    {
        var request = new DTOs.API.Announcements.GetAnnouncementsForMe.Request
            {
                TextContains = string.IsNullOrWhiteSpace(_searchText) ? null : _searchText,
                InCategoriesIds = SelectedCategories.Any() ? SelectedCategories.Select(e => e.Id) : null,
                InSubjectIds = SelectedSubjects.Any() ? SelectedSubjects.Select(e => e.Id) : null,
                Limit = _pageSize,
                Skip = (_onPage - 1) * _pageSize,
                OrderByCreationDateDescending = true,
            };

        var response = await _announcementRepository.FetchAnnouncementsForMe(request);

        _announcementDTOs = response.Announcements.ToList();
        _totalNumOfPages = response.TotalCount / _pageSize;
    }

    public async Task PageChanged(int i)
    {
        _onPage = i;
        await ReloadAnnouncements();
    }

    private void ShowAnnouncementInDetail(int id)
    {
        NavManager.NavigateTo($"showannouncement/{id}");
    }
}
