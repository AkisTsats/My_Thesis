@page "/usersettings"
@inject NavigationManager NavManager
@inject HttpClient Http
@inject SettingsRepository _settingsRepository;
@inject NavigationManager UriHelper
@inject HttpClient Http

@using CeidAnnouncementManager.Services
@using DTOs.Data;
@using Microsoft.AspNetCore.Authorization;
@using DTOs.API.Responses
@using DTOs.Common

<PageTitle>Οι Ρυθμίσεις μου</PageTitle>

<MudText Typo="Typo.h3">Οι Ρυθμίσεις μου</MudText>

    <MudForm Model="@_myDTO" Class="pa-md-6 mx-lg-auto">
        <MudTextField Label="Όνομα" @bind-Value="_myDTO.Name" Disabled ></MudTextField>
        <MudTextField Label="Επώνυμο" @bind-Value="_myDTO.Surname" Disabled></MudTextField>
        <MudTextField Label="Βασική διέυθυνση ηλ. ταχυδρομείου" @bind-Value="_myDTO.PrimaryEmail" Disabled></MudTextField>
        <MudTextField Label="Προσθήκη τηλεφώνου" @bind-Value="_myDTO.PhoneNumber" Required="false"></MudTextField>
        <MudTextField Label="Προσθήκη εναλλακτικού ηλ. ταχυδροείου" @bind-Value="_myDTO.SecondaryEmail" Required="false"></MudTextField>
        <MudTextField Label="Τρέχον έτος" @bind-Value="_myDTO.CurrentYear" Required="false"></MudTextField>
        <MudTextField Label="Έτος εισαγωγής" @bind-Value="_myDTO.EnrollmentYear" Required="false"></MudTextField>
        <MudSwitch For="@(() => model.getByEmail)" Label="Parameter Label" Color="Color.Primary" />
        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Update">Save Settings</MudButton> 
        <MudSelect Class="mt-10" T="CategoryDTO" Label="Επιλέξτε κατηγορίες" MultiSelection="true" ToStringFunc="@CategoryConverter" @bind-Value="CategoryDTO.DEFAULT_NO_CATEGORY_CHOOSEN" @bind-SelectedValues="SelectedCategories" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiselectionTextForCategories))">
            @foreach (var category in AllCategories)
            {
                <MudSelectItem T="CategoryDTO" Value="@category">@category.CategoryName</MudSelectItem>
            }
        </MudSelect>
        <MudSelect Class="mt-10" T="SubjectDTO" Label="Επιλέξτε μαθήματα" MultiSelection="true" ToStringFunc="@SubjectConverter" @bind-Value="SubjectDTO.DEFAULT_NO_SUBJECT_CHOOSEN" @bind-SelectedValues="SelectedSubjects" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiselectionTextForSubjects))">
            @foreach (var subject in AllSubjects)
            {
                <MudSelectItem T="SubjectDTO" Value="@subject">@subject.SubjectName</MudSelectItem>
            }
        </MudSelect>
     </MudForm>

 @code {
    [Inject] private IDialogService DialogService { get; set; }

    #region Categories picker
    private IEnumerable<CategoryDTO> AllCategories { get; set; } = [];
    private IEnumerable<CategoryDTO> SelectedCategories { get; set; } = [];

    private string GetMultiselectionTextForCategories(List<string> selectedValues) => selectedValues.Count == 0 ? "Δεν έχουν επιλεχθεί κατηγορίες" : $"Επιλεγμένες Κατηγορίες: {string.Join(", ", selectedValues.Select(x => x))}";

    Func<CategoryDTO, string> CategoryConverter = p => p?.CategoryName;
    #endregion

    #region Subject picker
    private IEnumerable<SubjectDTO> AllSubjects { get; set; } = [];
    private IEnumerable<SubjectDTO> SelectedSubjects { get; set; } = [];

    private string GetMultiselectionTextForSubjects(List<string> selectedValues) => selectedValues.Count == 0 ? "Δεν έχουν επιλεχθεί Μαθήματα" : $"Επιλεγμένες Μαθήματα: {string.Join(", ", selectedValues.Select(x => x))}";

    Func<SubjectDTO, string> SubjectConverter = p => p?.SubjectName;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        _myDTO = await PrintWebApiResponse();

        try
        {
            var settings = await _settingsRepository.FetchSettingsForCreateAnnouncement();
            
            AllCategories = settings.Categories;
            AllSubjects = settings.Subjects;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching categories: {ex}");
        }
    }

    [Parameter]
    public int id { get; set; }

    private UserDTO _myDTO;
    UserDTO postUser = new UserDTO();

    public async Task<UserDTO> PrintWebApiResponse()
    {
        var response = await Http.GetStringAsync($"https://localhost:5001/api/User/GetUserBy?1");
        //string serializedString = System.Text.Json.JsonSerializer.Serialize(response);

        Console.WriteLine(response);

        var apiResponse = response.DeserializeMethod<UserDTO>();

        return apiResponse;

    }

    async Task Update()
    {
        id = 1;
        var post = postUser.SerializeMethod<UserDTO>();
        postUser.Id = id;
        postUser.Name = _myDTO.Name;
        postUser.Surname = _myDTO.Surname;
        postUser.PrimaryEmail = _myDTO.PrimaryEmail;
        postUser.Role = "admin";

        var response = await Http.PutAsJsonAsync("https://localhost:5001/api/User/UpdateUserByID/1", postUser);

        var result = await response.Content.ReadFromJsonAsync<List<string>>();

    }

    #region Toggle Buttons
    DisplayNameLabelClass model = new();

    public class DisplayNameLabelClass
    {
        [Label("Λήψη ειδοποιήσεων στο email")]
        public bool getByEmail { get; set; }
        [Label("Boolean LabelAttribute")]
        public bool getBySMS { get; set; }
    }
    #endregion
}
