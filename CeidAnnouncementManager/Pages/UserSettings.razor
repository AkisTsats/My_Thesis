@page "/usersettings"
@inject NavigationManager NavManager
@inject HttpClient Http
@inject PublicRepository _publicRepository;
@inject SettingsRepository _settingsRepository;
@inject UsersRepository _userRepository;
@inject NavigationManager UriHelper
@inject HttpClient Http

@using CeidAnnouncementManager.Services
@using DTOs.Data;
@using Microsoft.AspNetCore.Authorization;
@using DTOs.API.Responses
@using DTOs.Common

<PageTitle>Οι Ρυθμίσεις μου</PageTitle>

<MudText Typo="Typo.h3">Ρυθμίσεις</MudText>

<MudForm Class="pa-md-6 mx-lg-auto">
    <MudTextField Label="Όνομα" @bind-Value="@_user.FirstName" Disabled></MudTextField>
    <MudTextField Label="Επώνυμο" @bind-Value="_user.LastName" Disabled></MudTextField>
    <MudTextField Label="Έτος εισαγωγής" @bind-Value="_user.EnrollmentYear" Disabled></MudTextField>
    <MudTextField Label="Διέυθυνση email" @bind-Value="_user.Email" Disabled></MudTextField>
    <MudCheckBox Label="Ενημέρωση μέσω email" @bind-Value="ReceiveNotificationsByEmail"></MudCheckBox>
    <MudTextField Label="Εναλακτικό email 1" @bind-Value="AlternativeEmail1" Required="false"></MudTextField>
    <MudTextField Label="Εναλακτικό email 2" @bind-Value="AlternativeEmail2" Required="false"></MudTextField>
    <MudCheckBox Label="Ενημέρωση μέσω τηλεφώνου" @bind-Value="ReceiveNotificationsByPhone"></MudCheckBox>
    <MudTextField Label="Τηλέφωνο επικοινωνίας" @bind-Value="AlternativePhone1" Required="false"></MudTextField>
    <MudTextField Label="Εναλακτικό τηλεφωνο επικοινωνίας" @bind-Value="AlternativePhone2" Required="false"></MudTextField>
    <MudDatePicker Label="Παύση ειδοποιήσεων μέχρι" Editable="true" @bind-Date="PauseNotificationUntilDate" Placeholder="Επιλέξτε ημερομηνία" />
    <MudSelect Class="mt-10" T="CategoryDTO" Label="Κατηγορίες ενδιαφέροντος" MultiSelection="true" ToStringFunc="@CategoryConverter" @bind-Value="CategoryDTO.DEFAULT_NO_CATEGORY_CHOOSEN" @bind-SelectedValues="SelectedCategories" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiselectionTextForCategories))">
        @foreach (var category in AllCategories)
        {
            <MudSelectItem T="CategoryDTO" Value="@category">@category.CategoryName</MudSelectItem>
        }
    </MudSelect>
    <MudSelect Class="mt-10" T="SubjectDTO" Label="Μαθήματα ενδιαφέροντος" MultiSelection="true" ToStringFunc="@SubjectConverter" @bind-Value="SubjectDTO.DEFAULT_NO_SUBJECT_CHOOSEN" @bind-SelectedValues="SelectedSubjects" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiselectionTextForSubjects))">
        @foreach (var subject in AllSubjects)
        {
            <MudSelectItem T="SubjectDTO" Value="@subject">@subject.SubjectName</MudSelectItem>
        }
    </MudSelect>
    <MudSelect Class="mt-10" T="AcademicYearDTO" Label="Ακαδημαικά έτη ενδιαφέροντος" MultiSelection="true" ToStringFunc="@AcademicYearConverter" @bind-SelectedValues="SelectedAcademicYears" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiselectionTextForAcademicYears))">
        @foreach (var year in AllAcademicYears)
        {
            <MudSelectItem T="AcademicYearDTO" Value="@year">@year.Year</MudSelectItem>
        }
    </MudSelect>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Update">ΑΠΟΘΗΚΕΥΣΗ</MudButton>
</MudForm>

@code {
    [Inject] private IDialogService DialogService { get; set; }

    #region Categories picker
    private IEnumerable<CategoryDTO> AllCategories { get; set; } = [];
    private IEnumerable<CategoryDTO> SelectedCategories { get; set; } = [];

    private string GetMultiselectionTextForCategories(List<string> selectedValues) => selectedValues.Count == 0 ? "Δεν έχουν επιλεχθεί κατηγορίες" : $"{string.Join(", ", selectedValues.Select(x => x))}";

    Func<CategoryDTO, string> CategoryConverter = p => p?.CategoryName;
    #endregion

    #region Subject picker
    private IEnumerable<SubjectDTO> AllSubjects { get; set; } = [];
    private IEnumerable<SubjectDTO> SelectedSubjects { get; set; } = [];

    private string GetMultiselectionTextForSubjects(List<string> selectedValues) => selectedValues.Count == 0 ? "Δεν έχουν επιλεχθεί Μαθήματα" : $"{string.Join(", ", selectedValues.Select(x => x))}";

    Func<SubjectDTO, string> SubjectConverter = p => p?.SubjectName;
    #endregion

    #region Academic years picker
    private IEnumerable<AcademicYearDTO> AllAcademicYears { get; set; } = [];
    private IEnumerable<AcademicYearDTO> SelectedAcademicYears { get; set; } = [];

    private string GetMultiselectionTextForAcademicYears(List<string> selectedValues) => selectedValues.Count == 0 ? "Δεν έχουν επιλεχθεί έτη" : $"{string.Join(", ", selectedValues.Select(x => x))}";

    Func<AcademicYearDTO, string> AcademicYearConverter = p => $"{p?.Year}";
    #endregion

    private UserDTO _user { get; set; }

    private DateTime? PauseNotificationUntilDate { get; set; }
    private bool ReceiveNotificationsByEmail { get; set; }
    private string AlternativeEmail1 { get; set; }
    private string AlternativeEmail2 { get; set; }
    private bool ReceiveNotificationsByPhone { get; set; }
    private string AlternativePhone1 { get; set; }
    private string AlternativePhone2 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ReloadSettings();
    }

    async Task ReloadSettings()
    {
        var systemSettings = await _publicRepository.FetchFilteringSettings();

        _user = await _userRepository.GetMe();

        var settings = await _settingsRepository.FetchMySettings();

        AllCategories = systemSettings.Categories;
        SelectedCategories = settings.Categories;

        AllSubjects = systemSettings.Subjects;
        SelectedSubjects = settings.Subjects;

        AllAcademicYears = systemSettings.AcademicYears;
        SelectedAcademicYears = settings.AcademicYears;

        PauseNotificationUntilDate = settings.PauseNotificationUntilDate;

        ReceiveNotificationsByEmail = settings.ReceiveNotificationsByEmail;
        AlternativeEmail1 = settings.ReceiveNotificationsInEmails?.FirstOrDefault() ?? "";
        AlternativeEmail2 = settings.ReceiveNotificationsInEmails?.Skip(1).FirstOrDefault() ?? "";

        ReceiveNotificationsByPhone = settings.ReceiveNotificationsByPhone;
        AlternativePhone1 = settings.ReceiveNotificationsInPhones?.FirstOrDefault() ?? "";
        AlternativePhone2 = settings.ReceiveNotificationsInPhones?.Skip(1).FirstOrDefault() ?? "";
    }

    async Task Update()
    {
        var request = new DTOs.API.Settings.UpdateMySettings.Request
            {
                Subjects = SelectedSubjects,
                Categories = SelectedCategories,
                AcademicYears = SelectedAcademicYears,

                PauseNotificationUntilDate = PauseNotificationUntilDate,

                ReceiveNotificationsByEmail = ReceiveNotificationsByEmail,
                ReceiveNotificationsInEmails = [AlternativeEmail1, AlternativeEmail2],
                ReceiveNotificationsByPhone = ReceiveNotificationsByPhone,
                ReceiveNotificationsInPhones = [AlternativePhone1, AlternativePhone2],
            };

        var response = await _settingsRepository.UpdateMySettings(request);

        await ReloadSettings();
    }
}
