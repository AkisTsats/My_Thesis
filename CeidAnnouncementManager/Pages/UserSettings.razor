@page "/usersettings"
@inject NavigationManager NavManager
@inject HttpClient Http
@inject PublicRepository _publicRepository;
@inject SettingsRepository _settingsRepository;
@inject UsersRepository _userRepository;
@inject NavigationManager UriHelper
@inject HttpClient Http

@using CeidAnnouncementManager.Services
@using DTOs.Data;
@using Microsoft.AspNetCore.Authorization;
@using DTOs.API.Responses
@using DTOs.Common

<PageTitle>Οι Ρυθμίσεις μου</PageTitle>

<MudCard Class="mx-auto my-6 p-6" Style="max-width: 1000px;" Elevation="4">
    <MudCardContent>
        <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-2">Ρυθμίσεις</MudText>

        <MudText Typo="Typo.h5" Color="Color.Secondary" Class="mt-4 mb-2">Προσωπικές Πληροφορίες</MudText>
        <MudForm Class="pa-4" Style="display: grid; gap: 1rem;">
            <MudTextField Label="Όνομα" @bind-Value="FirstName" Disabled Color="Color.GrayLight"></MudTextField>
            <MudTextField Label="Επώνυμο" @bind-Value="LastName" Disabled Color="Color.GrayLight"></MudTextField>
            <MudTextField Label="Έτος εισαγωγής" @bind-Value="EnrollmentYear" Disabled Color="Color.GrayLight"></MudTextField>
            <MudTextField Label="Διεύθυνση email" @bind-Value="Email" Disabled Color="Color.GrayLight"></MudTextField>

            <MudText Typo="Typo.h5" Color="Color.Secondary" Class="mt-4 mb-2">Ειδοποιήσεις</MudText>
            <MudCheckBox Label="Ενημέρωση μέσω email" @bind-Value="ReceiveNotificationsByEmail"></MudCheckBox>
            <MudTextField Label="Εναλλακτικό email 1" @bind-Value="AlternativeEmail1" Required="false"></MudTextField>
            <MudTextField Label="Εναλλακτικό email 2" @bind-Value="AlternativeEmail2" Required="false"></MudTextField>
            <MudCheckBox Label="Ενημέρωση μέσω τηλεφώνου" @bind-Value="ReceiveNotificationsByPhone"></MudCheckBox>
            <MudTextField Label="Τηλέφωνο επικοινωνίας" @bind-Value="AlternativePhone1" Required="false"></MudTextField>
            <MudTextField Label="Εναλλακτικό τηλεφωνο επικοινωνίας" @bind-Value="AlternativePhone2" Required="false"></MudTextField>

            <MudText Typo="Typo.h5" Color="Color.Secondary" Class="mt-4 mb-2">Προτιμήσεις</MudText>
            <MudDatePicker Label="Παύση ειδοποιήσεων μέχρι" Editable="true" @bind-Date="PauseNotificationUntilDate" Placeholder="Επιλέξτε ημερομηνία" />
            <MudSelect T="CategoryDTO" Label="Κατηγορίες ενδιαφέροντος" MultiSelection="true" Class="mt-2" ToStringFunc="@CategoryConverter" @bind-SelectedValues="SelectedCategories" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiselectionTextForCategories))">
                @foreach (var category in AllCategories)
                {
                    <MudSelectItem T="CategoryDTO" Value="@category">@category.CategoryName</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="SubjectDTO" Label="Μαθήματα ενδιαφέροντος" MultiSelection="true" Class="mt-2" ToStringFunc="@SubjectConverter" @bind-SelectedValues="SelectedSubjects" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiselectionTextForSubjects))">
                @foreach (var subject in AllSubjects)
                {
                    <MudSelectItem T="SubjectDTO" Value="@subject">@subject.SubjectName</MudSelectItem>
                }
            </MudSelect>
            @* <MudSelect T="AcademicYearDTO" Label="Ακαδημαικά έτη ενδιαφέροντος" MultiSelection="true" Class="mt-2" ToStringFunc="@AcademicYearConverter" @bind-SelectedValues="SelectedAcademicYears" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiselectionTextForAcademicYears))">
                @foreach (var year in AllAcademicYears)
                {
                    <MudSelectItem T="AcademicYearDTO" Value="@year">@year.Year</MudSelectItem>
                }
            </MudSelect> *@

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Update" StartIcon="@Icons.Material.Filled.Save" Class="mt-4">
                ΑΠΟΘΗΚΕΥΣΗ
            </MudButton>
        </MudForm>
    </MudCardContent>
</MudCard>

@code {
    [Inject] private IDialogService DialogService { get; set; }

    #region Categories picker
    private IEnumerable<CategoryDTO> AllCategories { get; set; } = [];
    private IEnumerable<CategoryDTO> SelectedCategories { get; set; } = [];

    private string GetMultiselectionTextForCategories(List<string> selectedValues) => selectedValues.Count == 0 ? "Δεν έχουν επιλεχθεί κατηγορίες" : $"{string.Join(", ", selectedValues.Select(x => x))}";

    Func<CategoryDTO, string> CategoryConverter = p => p?.CategoryName;
    #endregion

    #region Subject picker
    private IEnumerable<SubjectDTO> AllSubjects { get; set; } = [];
    private IEnumerable<SubjectDTO> SelectedSubjects { get; set; } = [];

    private string GetMultiselectionTextForSubjects(List<string> selectedValues) => selectedValues.Count == 0 ? "Δεν έχουν επιλεχθεί Μαθήματα" : $"{string.Join(", ", selectedValues.Select(x => x))}";

    Func<SubjectDTO, string> SubjectConverter = p => p?.SubjectName;
    #endregion

    #region Academic years picker
    // private IEnumerable<AcademicYearDTO> AllAcademicYears { get; set; } = [];
    // private IEnumerable<AcademicYearDTO> SelectedAcademicYears { get; set; } = [];

    // private string GetMultiselectionTextForAcademicYears(List<string> selectedValues) => selectedValues.Count == 0 ? "Δεν έχουν επιλεχθεί έτη" : $"{string.Join(", ", selectedValues.Select(x => x))}";

    // Func<AcademicYearDTO, string> AcademicYearConverter = p => $"{p?.Year}";
    #endregion

    private UserDTO _user { get; set; }

    private string FirstName { get; set; }
    private string LastName { get; set; }
    private int EnrollmentYear { get; set; }
    private string Email { get; set; }

    private DateTime? PauseNotificationUntilDate { get; set; }
    private bool ReceiveNotificationsByEmail { get; set; }
    private string AlternativeEmail1 { get; set; }
    private string AlternativeEmail2 { get; set; }
    private bool ReceiveNotificationsByPhone { get; set; }
    private string AlternativePhone1 { get; set; }
    private string AlternativePhone2 { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadSettings();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    async Task ReloadSettings()
    {
        try
        {
            var systemSettings = await _publicRepository.FetchFilteringSettings();

            _user = await _userRepository.GetMe();

            FirstName = _user.FirstName;
            LastName = _user.LastName;
            EnrollmentYear = _user.EnrollmentYear;
            Email = _user.Email;

            var settings = await _settingsRepository.FetchMySettings();

            AllCategories = systemSettings.Categories;
            SelectedCategories = settings.Categories;

            AllSubjects = systemSettings.Subjects;
            SelectedSubjects = settings.Subjects;

            //AllAcademicYears = systemSettings.AcademicYears;
            //SelectedAcademicYears = settings.AcademicYears;

            PauseNotificationUntilDate = settings.PauseNotificationUntilDate;

            ReceiveNotificationsByEmail = settings.ReceiveNotificationsByEmail;
            AlternativeEmail1 = settings.ReceiveNotificationsInEmails?.FirstOrDefault() ?? "";
            AlternativeEmail2 = settings.ReceiveNotificationsInEmails?.Skip(1).FirstOrDefault() ?? "";

            ReceiveNotificationsByPhone = settings.ReceiveNotificationsByPhone;
            AlternativePhone1 = settings.ReceiveNotificationsInPhones?.FirstOrDefault() ?? "";
            AlternativePhone2 = settings.ReceiveNotificationsInPhones?.Skip(1).FirstOrDefault() ?? "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    async Task Update()
    {
        var request = new DTOs.API.Settings.UpdateMySettings.Request
            {
                Subjects = SelectedSubjects,
                Categories = SelectedCategories,
                //AcademicYears = SelectedAcademicYears,

                PauseNotificationUntilDate = PauseNotificationUntilDate,

                ReceiveNotificationsByEmail = ReceiveNotificationsByEmail,
                ReceiveNotificationsInEmails = [AlternativeEmail1, AlternativeEmail2],
                ReceiveNotificationsByPhone = ReceiveNotificationsByPhone,
                ReceiveNotificationsInPhones = [AlternativePhone1, AlternativePhone2],
            };

        var response = await _settingsRepository.UpdateMySettings(request);

        await ReloadSettings();

    }
}
