// <auto-generated />
using System;
using EFDataAccessLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFDataAccessLibrary.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AnnouncementCategoriesList", b =>
                {
                    b.Property<int>("AnnouncementsAnnID")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesListCategoryID")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementsAnnID", "CategoriesListCategoryID");

                    b.HasIndex("CategoriesListCategoryID");

                    b.ToTable("AnnouncementCategoriesList");
                });

            modelBuilder.Entity("CategoriesListUser", b =>
                {
                    b.Property<int>("CategoriesListCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserID")
                        .HasColumnType("int");

                    b.HasKey("CategoriesListCategoryID", "UsersUserID");

                    b.HasIndex("UsersUserID");

                    b.ToTable("CategoriesListUser");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.Announcement", b =>
                {
                    b.Property<int>("AnnID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abstract")
                        .HasColumnType("longtext");

                    b.Property<bool>("Alert")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Author")
                        .HasColumnType("longtext");

                    b.Property<string>("Body")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AnnID");

                    b.HasIndex("UserID");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.CategoriesList", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext");

                    b.HasKey("CategoryID");

                    b.ToTable("CList");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.CategoriesListAnnouncement", b =>
                {
                    b.Property<int>("AnnouncementID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("categoriesListannouncement");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.CategoriesListUser", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("categorieslistuser");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.File", b =>
                {
                    b.Property<int>("FileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AnnouncementAnnID")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<string>("Path")
                        .HasColumnType("longtext");

                    b.HasKey("FileID");

                    b.HasIndex("AnnouncementAnnID");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.Image", b =>
                {
                    b.Property<int>("ImageID")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageType")
                        .HasColumnType("longtext");

                    b.Property<string>("Path")
                        .HasColumnType("longtext");

                    b.HasKey("ImageID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.Permission", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<bool>("SOS")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canAcceptAnn")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canAddCategories")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canAddSubjects")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canDeleteAllAnn")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canDeleteMyAnn")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canEditAllAnn")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canEditMyAnn")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canEditMySubjects")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canEditMyYears")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canEditNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canPostAnn")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canPostInfo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canSeeAllAnn")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canSeeMyAnn")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canSeePubAnn")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canSeeStats")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selectCategory")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selectSubject")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.Preference", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<bool>("InBrowser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("InMail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("InPhone")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PauseAlert")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PauseOneDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PauseOneHour")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserID");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.Statistics", b =>
                {
                    b.Property<int>("TodayAnnouncements")
                        .HasColumnType("int");

                    b.Property<int>("TodayPeakUsers")
                        .HasColumnType("int");

                    b.Property<int>("TotalAnnouncements")
                        .HasColumnType("int");

                    b.Property<int>("TotalUsers")
                        .HasColumnType("int");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.SubjectsList", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .HasColumnType("longtext");

                    b.HasKey("SubjectID");

                    b.ToTable("SList");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CurrentYear")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentYear")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.YearsList", b =>
                {
                    b.Property<int>("YearsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("YearsID");

                    b.ToTable("YList");
                });

            modelBuilder.Entity("SubjectsListUser", b =>
                {
                    b.Property<int>("SubjectsListSubjectID")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserID")
                        .HasColumnType("int");

                    b.HasKey("SubjectsListSubjectID", "UsersUserID");

                    b.HasIndex("UsersUserID");

                    b.ToTable("SubjectsListUser");
                });

            modelBuilder.Entity("UserYearsList", b =>
                {
                    b.Property<int>("UsersUserID")
                        .HasColumnType("int");

                    b.Property<int>("YearsListYearsID")
                        .HasColumnType("int");

                    b.HasKey("UsersUserID", "YearsListYearsID");

                    b.HasIndex("YearsListYearsID");

                    b.ToTable("UserYearsList");
                });

            modelBuilder.Entity("AnnouncementCategoriesList", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Data.Announcement", null)
                        .WithMany()
                        .HasForeignKey("AnnouncementsAnnID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataAccessLibrary.Data.CategoriesList", null)
                        .WithMany()
                        .HasForeignKey("CategoriesListCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoriesListUser", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Data.CategoriesList", null)
                        .WithMany()
                        .HasForeignKey("CategoriesListCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataAccessLibrary.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.Announcement", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Data.User", "User")
                        .WithMany("Announcements")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.CategoriesListAnnouncement", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Data.Announcement", "Announcement")
                        .WithMany("CategoriesListAnnouncements")
                        .HasForeignKey("AnnouncementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataAccessLibrary.Data.CategoriesList", "Category")
                        .WithMany("CategoriesListAnnouncements")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.CategoriesListUser", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Data.CategoriesList", "Category")
                        .WithMany("CategoriesListUsers")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataAccessLibrary.Data.User", "User")
                        .WithMany("CategoriesListUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.File", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Data.Announcement", "Announcement")
                        .WithMany("Files")
                        .HasForeignKey("AnnouncementAnnID");

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.Image", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Data.Announcement", "Announcement")
                        .WithOne("Image")
                        .HasForeignKey("EFDataAccessLibrary.Data.Image", "ImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.Permission", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Data.User", "User")
                        .WithOne("Permissions")
                        .HasForeignKey("EFDataAccessLibrary.Data.Permission", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.Preference", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Data.User", "User")
                        .WithOne("Preferences")
                        .HasForeignKey("EFDataAccessLibrary.Data.Preference", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SubjectsListUser", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Data.SubjectsList", null)
                        .WithMany()
                        .HasForeignKey("SubjectsListSubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataAccessLibrary.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserYearsList", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataAccessLibrary.Data.YearsList", null)
                        .WithMany()
                        .HasForeignKey("YearsListYearsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.Announcement", b =>
                {
                    b.Navigation("CategoriesListAnnouncements");

                    b.Navigation("Files");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.CategoriesList", b =>
                {
                    b.Navigation("CategoriesListAnnouncements");

                    b.Navigation("CategoriesListUsers");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Data.User", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("CategoriesListUsers");

                    b.Navigation("Permissions");

                    b.Navigation("Preferences");
                });
#pragma warning restore 612, 618
        }
    }
}
